<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FetchingChanges" xml:space="preserve">
    <value>Fetching changes ({0}/{1})...</value>
  </data>
  <data name="DownloadsRemianingFallback" xml:space="preserve">
    <value>Downloads (0/???)   ???GB remaining</value>
    <comment>Happens if bytes total = -1</comment>
  </data>
  <data name="DownloadsRemaining" xml:space="preserve">
    <value>Downloads ({0}/{1})   {2:0.00}GB remaining</value>
  </data>
  <data name="UpdatesRemainingFallback" xml:space="preserve">
    <value>Updates (0/???)   ???GB remaining</value>
    <comment>Shown if bytes total -1</comment>
  </data>
  <data name="UpdatesRemaining" xml:space="preserve">
    <value>Updates ({0}/{1})   {2:0.00}GB remaining</value>
  </data>
  <data name="LoadingServerStatus" xml:space="preserve">
    <value>Loading Server (procesing your local mods, might be slow)</value>
  </data>
  <data name="LoadingServer" xml:space="preserve">
    <value>Loading Server</value>
  </data>
  <data name="RemoteModsFetched" xml:space="preserve">
    <value>Remote Mods Fetched:</value>
  </data>
  <data name="ServerLoaded" xml:space="preserve">
    <value>Server Loaded</value>
  </data>
  <data name="FailedToLoadServerFile" xml:space="preserve">
    <value>Failed to load server file. Check the URL and try again.</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="FailedToLoadDueToBadUrl" xml:space="preserve">
    <value>Failed to load due to bad URL</value>
  </data>
  <data name="FailedToHashLocalFiles" xml:space="preserve">
    <value>Failed to hash local files. Check they are not in use and try again.</value>
  </data>
  <data name="FailedToLoadDueToIOError" xml:space="preserve">
    <value>Failed to load due to IO Error</value>
  </data>
  <data name="AboutToFetchMods" xml:space="preserve">
    <value>About to fetch mods! This might take a long time.</value>
  </data>
  <data name="FetchingChangesStatus" xml:space="preserve">
    <value>Fetching changes</value>
  </data>
  <data name="ChangesFetchedIn" xml:space="preserve">
    <value>Changes fetched in {0}</value>
  </data>
  <data name="FailedToAcquire" xml:space="preserve">
    <value>Failed to acquire {0} changes. Your mods are not up to date as a result. 
You must re-sync to be up to date. Ensure you are connected to the internet.</value>
  </data>
  <data name="FetchedModsIn" xml:space="preserve">
    <value>Fetched mods in {0}</value>
  </data>
  <data name="ProgramTitle" xml:space="preserve">
    <value>Beowulf Sync Prototype {0}</value>
    <comment>Do not translate
      Do not translate</comment>
  </data>
  <data name="SelectModInstallLocation" xml:space="preserve">
    <value>Select where you wish to install the mods to</value>
  </data>
  <data name="LoadRepo" xml:space="preserve">
    <value>Load Repo</value>
    <comment>Do not translate</comment>
  </data>
  <data name="ModPath" xml:space="preserve">
    <value>Mod Path</value>
    <comment>Do not translate</comment>
  </data>
  <data name="ModPathTooltip" xml:space="preserve">
    <value>The place where you wish to install your mods.</value>
    <comment>Do not translate</comment>
  </data>
  <data name="SelectFolder" xml:space="preserve">
    <value>Select Folder</value>
    <comment>Do not translate</comment>
  </data>
  <data name="Sync" xml:space="preserve">
    <value>Sync</value>
    <comment>Do not translate</comment>
  </data>
  <data name="SyncUrl" xml:space="preserve">
    <value>Sync URL</value>
    <comment>Do not translate</comment>
  </data>
  <data name="SyncUrlTooltip" xml:space="preserve">
    <value>Server sync file, check the wiki</value>
    <comment>Do not translate</comment>
  </data>
</root>